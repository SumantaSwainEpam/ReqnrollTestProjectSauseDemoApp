name: Reqnroll Test Project Sause Demo App

on:
  push:
    branches: [ master ]
  workflow_dispatch:
  # pull_request:
  #   branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.0' ]
        browser: [ chrome, firefox, edge ]  # Parallel browser testing

    env:
      BROWSER: ${{ matrix.browser }}
      REPORT_DIR: Reports
      LOG_DIR: Logs
      TEST_RESULTS_DIR: TestResults
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    steps:
      # Step 1Ô∏è: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2Ô∏è: Setup .NET SDK
      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Step 3Ô∏è: Cache NuGet packages for faster builds
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Step 4Ô∏è: Restore project dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 5Ô∏è: Build the solution
      - name:  Build solution
        run: dotnet build --no-restore --configuration Release

      # Step 6Ô∏è: Run BDD (ReqnRoll) tests per browser
      - name: üß™ Run Reqnroll Tests on ${{ matrix.browser }}
        run: |
          echo "üåê Running tests on browser: $BROWSER"
          dotnet test --no-build --configuration Release \
            --filter FullyQualifiedName~ReqnrollTestProjectSauseDemoApp.Features \
            --logger "trx;LogFileName=test_results_${{ matrix.browser }}.trx" \
            --results-directory ${{ env.TEST_RESULTS_DIR }} \
            --verbosity normal

      # Step 7Ô∏è: Upload logs, reports, and TRX results as artifacts
      - name: üì§ Upload Reports & Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Reports-and-Logs-${{ matrix.browser }}
          path: |
            **/${{ env.REPORT_DIR }}/
            **/${{ env.LOG_DIR }}/
            **/${{ env.TEST_RESULTS_DIR }}/
            **/*.trx

      # Step 8Ô∏è: Generate browser-wise test summary
      - name: Generate Test Summary
        if: always()
        run: |
          echo "### üß™ Test Summary for Browser: $BROWSER" >> $GITHUB_STEP_SUMMARY
          TRX_FILE=$(find ${{ env.TEST_RESULTS_DIR }} -name "test_results_${{ matrix.browser }}.trx" | head -1)
          if [ -f "$TRX_FILE" ]; then
            PASSED=$(grep -o 'Passed: [0-9]\+' "$TRX_FILE" | head -1 | awk '{print $2}')
            FAILED=$(grep -o 'Failed: [0-9]\+' "$TRX_FILE" | head -1 | awk '{print $2}')
            echo "- ‚úÖ Passed: ${PASSED:-0}" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ùå Failed: ${FAILED:-0}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è No TRX file found for parsing results." >> $GITHUB_STEP_SUMMARY
          fi
          echo "- üóÇÔ∏è Logs and HTML reports are available in uploaded artifacts." >> $GITHUB_STEP_SUMMARY

      # Step 9Ô∏è: Cleanup temporary files
      - name: Cleanup workspace
        if: always()
        run: |
          rm -rf ${{ env.TEST_RESULTS_DIR }} || true
          rm -rf ${{ env.REPORT_DIR }} || true
          rm -rf ${{ env.LOG_DIR }} || true

  # Step 10: Combine TRX results (after matrix runs complete)
  combine-reports:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Install ReportUnit
        run: dotnet tool install --global ReportUnit
        env:
          PATH: $PATH:/home/runner/.dotnet/tools

      - name: Generate Combined HTML Report
        run: |
          mkdir -p CombinedReport
          reportunit ./artifacts ./CombinedReport

      - name: Upload Combined HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: Combined-HTML-Report
          path: ./CombinedReport
