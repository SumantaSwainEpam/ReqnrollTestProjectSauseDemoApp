name: Reqnroll Test Project Sause Demo App

on:
  push:
    branches: [ master ]
  # pull_request:
  #   branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: [ '8.0' ]
        browser: [ chrome, firefox, edge ]  # Run tests in parallel on multiple browsers

    env:
      BROWSER: ${{ matrix.browser }}
      REPORT_DIR: Reports
      LOG_DIR: Logs

    steps:
      # Step 1️⃣: Checkout source code
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      # Step 2️⃣: Setup .NET SDK
      - name: ⚙️ Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Step 3️⃣: Cache NuGet packages for faster builds
      - name: 🧩 Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Step 4️⃣: Restore project dependencies
      - name: 📦 Restore dependencies
        run: dotnet restore

      # Step 5️⃣: Build the solution
      - name: 🏗️ Build solution
        run: dotnet build --no-restore --configuration Release

      # Step 6️⃣: Run tests in headless mode (Selenium + ReqNroll)
      - name: 🧪 Run BDD tests on ${{ matrix.browser }}
        run: |
          echo "Running tests on browser: $BROWSER"
          export GITHUB_ACTIONS=true
          dotnet test --no-build --configuration Release \
            --filter FullyQualifiedName~ReqnrollTestProjectSauseDemoApp.Features \
            --logger "trx;LogFileName=test_results_${{ matrix.browser }}.trx"

      # Step 7️⃣: Upload ExtentReports, Logs, and TRX files as artifacts
      - name: 📤 Upload Reports & Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Reports-and-Logs-${{ matrix.browser }}
          path: |
            ${{ env.REPORT_DIR }}/
            ${{ env.LOG_DIR }}/
            **/*.trx

      # Step 8️⃣: Generate a short summary in GitHub Actions
      - name: 📊 Generate Test Summary
        if: always()
        run: |
          echo "### 🧪 Test Summary for Browser: $BROWSER" >> $GITHUB_STEP_SUMMARY
          PASSED=$(grep -o 'Passed: [0-9]\+' test_results_${{ matrix.browser }}.trx | head -1 | awk '{print $2}')
          FAILED=$(grep -o 'Failed: [0-9]\+' test_results_${{ matrix.browser }}.trx | head -1 | awk '{print $2}')
          echo "- ✅ Passed: ${PASSED:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${FAILED:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- 🗂️ Logs and HTML reports are available in uploaded artifacts." >> $GITHUB_STEP_SUMMARY
